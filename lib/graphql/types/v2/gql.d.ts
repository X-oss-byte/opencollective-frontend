/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

declare module "@apollo/client" {

  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchTags($term: String) {\n    tagStats(tagSearchTerm: $term) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"): typeof import('./graphql').SearchTagsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConfirmContributionFields on Order {\n    id\n    hostFeePercent\n    pendingContributionData {\n      expectedAt\n      paymentMethod\n      ponumber\n      memo\n      fromAccountInfo {\n        name\n        email\n      }\n    }\n    memo\n    fromAccount {\n      id\n      slug\n      name\n      imageUrl\n    }\n    toAccount {\n      id\n      slug\n      name\n      imageUrl\n      ... on AccountWithHost {\n        bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n        host {\n          id\n          settings\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          settings\n        }\n      }\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      imageUrl\n    }\n    totalAmount {\n      valueInCents\n      currency\n    }\n    amount {\n      currency\n      valueInCents\n    }\n    taxAmount {\n      currency\n      valueInCents\n    }\n    tax {\n      id\n      type\n      rate\n    }\n    platformTipAmount {\n      currency\n      valueInCents\n    }\n    platformTipEligible\n  }\n"): typeof import('./graphql').ConfirmContributionFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ConfirmContribution($order: OrderUpdateInput!, $action: ProcessOrderAction!) {\n    processPendingOrder(order: $order, action: $action) {\n      id\n      legacyId\n      status\n      permissions {\n        id\n        canMarkAsPaid\n        canMarkAsExpired\n      }\n      ...ConfirmContributionFields\n    }\n  }\n  \n"): typeof import('./graphql').ConfirmContributionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CancelRecurringContribution($order: OrderReferenceInput!, $reason: String!, $reasonCode: String!) {\n    cancelOrder(order: $order, reason: $reason, reasonCode: $reasonCode) {\n      id\n      status\n    }\n  }\n"): typeof import('./graphql').CancelRecurringContributionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagStats($host: AccountReferenceInput) {\n    tagStats(host: $host, limit: 5) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"): typeof import('./graphql').TagStatsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PaypalPlanQuery(\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $frequency: ContributionFrequency!\n  ) {\n    paypalPlan(account: $account, tier: $tier, amount: $amount, frequency: $frequency) {\n      id\n    }\n  }\n"): typeof import('./graphql').PaypalPlanQueryDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditAccountSettings($account: AccountReferenceInput!, $key: AccountSettingsKey!, $value: JSON!) {\n    editAccountSetting(account: $account, key: $key, value: $value) {\n      id\n      settings\n    }\n  }\n"): typeof import('./graphql').EditAccountSettingsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditUpdate($update: UpdateUpdateInput!) {\n    editUpdate(update: $update) {\n      id\n      updatedAt\n      title\n      html\n      isPrivate\n      isChangelog\n      makePublicOn\n      userCanPublishUpdate\n    }\n  }\n"): typeof import('./graphql').EditUpdateDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteUpdate($id: String!) {\n    deleteUpdate(id: $id) {\n      id\n    }\n  }\n"): typeof import('./graphql').DeleteUpdateDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindAFiscalHostQuery(\n    $tags: [String]\n    $limit: Int\n    $offset: Int\n    $country: [CountryISO]\n    $currency: String\n    $searchTerm: String\n  ) {\n    hosts(\n      tag: $tags\n      limit: $limit\n      offset: $offset\n      tagSearchOperator: OR\n      country: $country\n      currency: $currency\n      searchTerm: $searchTerm\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        createdAt\n        settings\n        type\n        name\n        slug\n        description\n        longDescription\n        currency\n        totalHostedCollectives\n        hostFeePercent\n        isTrustedHost\n        location {\n          id\n          country\n        }\n        tags\n      }\n    }\n  }\n"): typeof import('./graphql').FindAFiscalHostQueryDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminPanel($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      isHost\n      type\n      settings\n      isArchived\n      isIncognito\n      imageUrl(height: 256)\n      features {\n        id\n        ...NavbarFields\n        VIRTUAL_CARDS\n        USE_PAYMENT_METHODS\n        EMIT_GIFT_CARDS\n      }\n      policies {\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          policies {\n            REQUIRE_2FA_FOR_ADMINS\n          }\n        }\n      }\n      ... on AccountWithHost {\n        hostFeePercent\n        host {\n          id\n          slug\n          name\n          settings\n          policies {\n            EXPENSE_AUTHOR_CANNOT_APPROVE {\n              enabled\n              amountInCents\n              appliesToHostedCollectives\n              appliesToSingleAdminCollectives\n            }\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n      ... on AccountWithHost {\n        isApproved\n      }\n    }\n  }\n  \n"): typeof import('./graphql').AdminPanelDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostVirtualCardRequests(\n    $hostSlug: String!\n    $collective: [AccountReferenceInput]\n    $selectedCollectiveSlug: String\n    $status: [VirtualCardRequestStatus]\n    $limit: Int!\n    $offset: Int!\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    account(slug: $selectedCollectiveSlug) {\n      id\n      legacyId\n      slug\n    }\n    virtualCardRequests(\n      host: { slug: $hostSlug }\n      collective: $collective\n      status: $status\n      limit: $limit\n      offset: $offset\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        purpose\n        notes\n        status\n        currency\n        spendingLimitAmount {\n          valueInCents\n          currency\n        }\n        spendingLimitInterval\n        createdAt\n        account {\n          id\n          name\n          slug\n          imageUrl\n        }\n        host {\n          id\n          name\n          slug\n          imageUrl\n        }\n        assignee {\n          id\n          name\n          email\n          slug\n          imageUrl\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').HostVirtualCardRequestsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AgreementMutationFields on Agreement {\n    id\n    ...AgreementViewFields\n    account {\n      id\n      ... on AccountWithHost {\n        # Refetch account agreements count to update the cache\n        hostAgreements {\n          totalCount\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').AgreementMutationFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddAgreement(\n    $host: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $attachment: Upload\n    $title: NonEmptyString!\n    $notes: String\n    $expiresAt: DateTime\n  ) {\n    addAgreement(\n      host: $host\n      title: $title\n      account: $account\n      attachment: $attachment\n      expiresAt: $expiresAt\n      notes: $notes\n    ) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n"): typeof import('./graphql').AddAgreementDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditAgreement(\n    $agreement: AgreementReferenceInput!\n    $title: NonEmptyString!\n    $expiresAt: DateTime\n    $notes: String\n    $attachment: Upload\n  ) {\n    editAgreement(agreement: $agreement, title: $title, expiresAt: $expiresAt, notes: $notes, attachment: $attachment) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n"): typeof import('./graphql').EditAgreementDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteAgreement($id: String!) {\n    deleteAgreement(agreement: { id: $id }) {\n      id\n    }\n  }\n"): typeof import('./graphql').DeleteAgreementDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AgreementViewFields on Agreement {\n    id\n    title\n    createdAt\n    expiresAt\n    notes\n    account {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n    }\n    createdBy {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n    }\n    attachment {\n      id\n      url\n      name\n      size\n      type\n    }\n  }\n"): typeof import('./graphql').AgreementViewFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NavbarFields on CollectiveFeatures {\n    id\n    ABOUT\n    CONNECTED_ACCOUNTS\n    RECEIVE_FINANCIAL_CONTRIBUTIONS\n    RECURRING_CONTRIBUTIONS\n    EVENTS\n    PROJECTS\n    USE_EXPENSES\n    RECEIVE_EXPENSES\n    USE_EXPENSES\n    COLLECTIVE_GOALS\n    TOP_FINANCIAL_CONTRIBUTORS\n    CONVERSATIONS\n    UPDATES\n    TEAM\n    CONTACT_FORM\n    RECEIVE_HOST_APPLICATIONS\n    HOST_DASHBOARD\n    TRANSACTIONS\n    REQUEST_VIRTUAL_CARDS\n  }\n"): typeof import('./graphql').NavbarFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ContributionFlowPaymentMethods($slug: String) {\n    account(slug: $slug) {\n      id\n      paymentMethods(\n        type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]\n        includeExpired: true\n      ) {\n        id\n        name\n        data\n        service\n        type\n        expiryDate\n        providerType\n        sourcePaymentMethod {\n          id\n          name\n          data\n          service\n          type\n          expiryDate\n          providerType\n          balance {\n            currency\n          }\n          limitedToHosts {\n            id\n            legacyId\n            slug\n          }\n        }\n        balance {\n          valueInCents\n          currency\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n        limitedToHosts {\n          id\n          legacyId\n          slug\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').ContributionFlowPaymentMethodsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentFields on Comment {\n    id\n    createdAt\n    html\n    reactions\n    userReactions\n    type\n    fromAccount {\n      id\n      type\n      name\n      slug\n      imageUrl\n    }\n  }\n"): typeof import('./graphql').CommentFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConversationListFragment on ConversationCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      title\n      summary\n      slug\n      createdAt\n      tags\n      fromAccount {\n        id\n        name\n        type\n        slug\n        imageUrl\n      }\n      followers(limit: 5) {\n        totalCount\n        nodes {\n          id\n          slug\n          type\n          name\n          imageUrl(height: 64)\n        }\n      }\n      stats {\n        id\n        commentsCount\n      }\n    }\n  }\n"): typeof import('./graphql').ConversationListFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query IsUserFollowingConversation($id: String!) {\n    loggedInAccount {\n      id\n      slug\n      imageUrl\n      type\n      name\n      ... on Individual {\n        isFollowingConversation(id: $id)\n      }\n    }\n  }\n"): typeof import('./graphql').IsUserFollowingConversationDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UpdateListFragment on UpdateCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      slug\n      title\n      summary\n      createdAt\n      publishedAt\n      isPrivate\n      userCanSeeUpdate\n      fromAccount {\n        id\n        type\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n"): typeof import('./graphql').UpdateListFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DashboardRecurringContributions($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      recurring: orders(filter: OUTGOING, onlyActiveSubscriptions: true, includeIncognito: true) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n        }\n      }\n      oneTime: orders(filter: OUTGOING, frequency: ONETIME, status: [PAID], includeIncognito: true, minAmount: 1) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n        }\n      }\n      canceled: orders(filter: OUTGOING, status: [CANCELLED], includeIncognito: true) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').DashboardRecurringContributionsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query WorkspaceHome($slug: String!, $limit: Int, $dateTo: DateTime, $classes: [ActivityClassType!]) {\n    account(slug: $slug) {\n      id\n      feed(limit: $limit, dateTo: $dateTo, classes: $classes) {\n        id\n        createdAt\n        type\n        data\n        isSystem\n        fromAccount {\n          id\n          name\n          slug\n          type\n          isIncognito\n          imageUrl(height: 48)\n        }\n        host {\n          id\n          name\n          slug\n          type\n        }\n        account {\n          id\n          name\n          slug\n          type\n          isIncognito\n          imageUrl(height: 48)\n          ... on AccountWithParent {\n            parent {\n              id\n              slug\n              name\n              type\n            }\n          }\n        }\n        expense {\n          id\n          legacyId\n          description\n          account {\n            id\n            name\n            type\n            slug\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        order {\n          id\n          legacyId\n          description\n          toAccount {\n            id\n            name\n            slug\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        update {\n          id\n          legacyId\n          title\n          summary\n          slug\n        }\n        individual {\n          id\n          slug\n          name\n          type\n          imageUrl(height: 48)\n          isIncognito\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').WorkspaceHomeDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation editVirtualCard(\n    $virtualCard: VirtualCardReferenceInput!\n    $name: String!\n    $limitAmount: AmountInput\n    $limitInterval: VirtualCardLimitInterval\n    $assignee: AccountReferenceInput!\n  ) {\n    editVirtualCard(\n      virtualCard: $virtualCard\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      assignee: $assignee\n    ) {\n      id\n      name\n      spendingLimitAmount\n      spendingLimitInterval\n      assignee {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n"): typeof import('./graphql').EditVirtualCardDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createVirtualCard(\n    $name: String!\n    $limitAmount: AmountInput!\n    $limitInterval: VirtualCardLimitInterval!\n    $account: AccountReferenceInput!\n    $assignee: AccountReferenceInput!\n    $virtualCardRequest: VirtualCardRequestReferenceInput\n  ) {\n    createVirtualCard(\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      account: $account\n      assignee: $assignee\n      virtualCardRequest: $virtualCardRequest\n    ) {\n      id\n      name\n      last4\n      data\n      virtualCardRequest {\n        id\n        status\n      }\n    }\n  }\n"): typeof import('./graphql').CreateVirtualCardDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CollectiveMembers($slug: String!) {\n    account(slug: $slug) {\n      id\n      members(role: ADMIN) {\n        nodes {\n          id\n          account {\n            id\n            name\n            imageUrl\n            slug\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').CollectiveMembersDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VirtualCardsAssignedToCollective($hostSlug: String!, $collectiveSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      allCards: hostedVirtualCards(collectiveAccountIds: [{ slug: $collectiveSlug }], status: [ACTIVE, INACTIVE]) {\n        totalCount\n      }\n      cardsMissingReceipts: hostedVirtualCards(\n        collectiveAccountIds: [{ slug: $collectiveSlug }]\n        status: [ACTIVE, INACTIVE]\n        hasMissingReceipts: true\n      ) {\n        totalCount\n      }\n    }\n  }\n"): typeof import('./graphql').VirtualCardsAssignedToCollectiveDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VirtualCardPolicies($slug: String) {\n    account(slug: $slug) {\n      id\n      policies {\n        MAXIMUM_VIRTUAL_CARD_LIMIT_AMOUNT_FOR_INTERVAL {\n          ALL_TIME {\n            valueInCents\n          }\n          DAILY {\n            valueInCents\n          }\n          MONTHLY {\n            valueInCents\n          }\n          PER_AUTHORIZATION {\n            valueInCents\n          }\n          WEEKLY {\n            valueInCents\n          }\n          YEARLY {\n            valueInCents\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').VirtualCardPoliciesDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MemberFields on Member {\n    id\n    role\n    since\n    createdAt\n    description\n    inherited\n    account {\n      id\n      name\n      slug\n      type\n      imageUrl(height: 64)\n      ... on Individual {\n        email\n      }\n    }\n  }\n"): typeof import('./graphql').MemberFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TeamSection($collectiveSlug: String!, $account: AccountReferenceInput!) {\n    account(slug: $collectiveSlug) {\n      id\n      isFrozen\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          type\n          name\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n        }\n      }\n      members(role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n        nodes {\n          id\n          ...MemberFields\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          slug\n          type\n          name\n          members(includeInherited: false, role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n            nodes {\n              id\n              ...MemberFields\n            }\n          }\n        }\n      }\n    }\n    memberInvitations(account: $account) {\n      id\n      role\n      since\n      createdAt\n      description\n      account: memberAccount {\n        id\n        name\n        slug\n        type\n        imageUrl(height: 64)\n        ... on Individual {\n          email\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').TeamSectionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ResendDraftExpenseInvite($expense: ExpenseReferenceInput!) {\n    resendDraftExpenseInvite(expense: $expense) {\n      id\n    }\n  }\n"): typeof import('./graphql').ResendDraftExpenseInviteDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LoggedInAccountExpensePayoutFields on Individual {\n    id\n    slug\n    imageUrl\n    type\n    name\n    legalName\n    hasTwoFactorAuth\n    location {\n      id\n      address\n      country\n      structured\n    }\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    adminMemberships: memberOf(role: ADMIN, includeIncognito: false, accountType: [ORGANIZATION, COLLECTIVE, FUND]) {\n      nodes {\n        id\n        account {\n          id\n          slug\n          imageUrl\n          type\n          name\n          legalName\n          isActive\n          isHost\n          policies {\n            REQUIRE_2FA_FOR_ADMINS\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              policies {\n                REQUIRE_2FA_FOR_ADMINS\n              }\n            }\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          ... on Organization {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          location {\n            id\n            address\n            country\n            structured\n          }\n          payoutMethods {\n            id\n            type\n            name\n            data\n            isSaved\n          }\n          childrenAccounts {\n            nodes {\n              id\n              slug\n              imageUrl\n              type\n              name\n              isActive\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').LoggedInAccountExpensePayoutFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExpenseHostFields on Host {\n    id\n    name\n    legalName\n    slug\n    type\n    currency\n    isHost\n    expensePolicy\n    website\n    settings\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n      PAYPAL_PAYOUTS\n    }\n    paypalPreApproval {\n      id\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n    supportedPayoutMethods\n    isTrustedHost\n    plan {\n      id\n    }\n  }\n"): typeof import('./graphql').ExpenseHostFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExpensePageExpenseFields on Expense {\n    id\n    legacyId\n    description\n    longDescription\n    currency\n    type\n    status\n    onHold\n    privateMessage\n    tags\n    amount\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n      }\n    }\n    createdAt\n    invoiceInfo\n    merchantId\n    requiredLegalDocuments\n    feesPayer\n    draft\n    items {\n      id\n      incurredAt\n      description\n      amount\n      url\n      file {\n        id\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n      idNumber\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        name\n        size\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    payee {\n      id\n      slug\n      name\n      legalName\n      type\n      isAdmin\n      isActive\n      location {\n        id\n        address\n        country\n      }\n      payoutMethods {\n        id\n        type\n        name\n        data\n        isSaved\n      }\n\n      # For Collectives, Funds, Events and Projects\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          # For Expenses across hosts\n          payoutMethods {\n            id\n            type\n            name\n            data\n            isSaved\n          }\n        }\n      }\n\n      # For Fiscal Hosts\n      ... on Organization {\n        host {\n          id\n        }\n      }\n    }\n    payeeLocation {\n      id\n      address\n      country\n      structured\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n    }\n    host {\n      id\n      name\n      legalName\n      slug\n      type\n      website\n      location {\n        id\n        address\n        country\n      }\n    }\n    requestedByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n    }\n    approvedBy {\n      id\n      type\n      slug\n      name\n      imageUrl(height: 80)\n    }\n    account {\n      id\n      legacyId\n      slug\n      name\n      type\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      expensesTags {\n        id\n        tag\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        hostAgreements {\n          totalCount\n        }\n        host {\n          id\n          legacyId\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      # For Hosts with Budget capabilities\n\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n    }\n    payoutMethod {\n      id\n      type\n      data\n      isSaved\n    }\n    virtualCard {\n      id\n      name\n      last4\n    }\n    permissions {\n      id\n      canEdit\n      canEditTags\n      canDelete\n      canSeeInvoiceInfo\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canComment\n      canUnschedulePayment\n      canVerifyDraftExpense\n      canUsePrivateNote\n      canHold\n      canRelease\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    activities {\n      id\n      type\n      createdAt\n      data\n      individual {\n        id\n        type\n        slug\n        name\n        imageUrl\n      }\n      transaction {\n        id\n        amount {\n          valueInCents\n          currency\n        }\n        platformFee {\n          valueInCents\n          currency\n        }\n        hostFee {\n          valueInCents\n          currency\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          rate\n          type\n          percentage\n        }\n        fromAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        toAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        expense {\n          id\n          currency\n          amount\n        }\n      }\n    }\n    recurringExpense {\n      id\n      interval\n      endsAt\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n  }\n\n  \n  \n"): typeof import('./graphql').ExpensePageExpenseFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExpensesListFieldsFragment on Expense {\n    id\n    legacyId\n    description\n    status\n    createdAt\n    tags\n    amount\n    comments {\n      totalCount\n    }\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n      }\n    }\n    currency\n    type\n    requiredLegalDocuments\n    feesPayer\n    account {\n      id\n      name\n      slug\n      createdAt\n      currency\n      type\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n    }\n    permissions {\n      id\n      canDelete\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canSeeInvoiceInfo\n      canEditTags\n      canUnschedulePayment\n      canHold\n      canRelease\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      data\n      isSaved\n    }\n    payee {\n      id\n      type\n      slug\n      name\n      imageUrl(height: 80)\n      isAdmin\n\n      # For Collectives, Funds, Events and Projects\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n        }\n      }\n\n      # For Fiscal Hosts\n      ... on Organization {\n        host {\n          id\n        }\n      }\n    }\n    createdByAccount {\n      id\n      type\n      slug\n      name\n    }\n  }\n"): typeof import('./graphql').ExpensesListFieldsFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExpensesListAdminFieldsFragment on Expense {\n    id\n    onHold\n    account {\n      id\n      ... on AccountWithHost {\n        hostAgreements {\n          totalCount\n        }\n      }\n    }\n    payoutMethod {\n      id\n      type\n      data\n    }\n    items {\n      id\n      description\n      incurredAt\n      url\n      amount\n      file {\n        id\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n  }\n"): typeof import('./graphql').ExpensesListAdminFieldsFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditExpense($expense: ExpenseUpdateInput!, $draftKey: String) {\n    editExpense(expense: $expense, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n    }\n  }\n\n  \n"): typeof import('./graphql').EditExpenseDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExpensePage($legacyExpenseId: Int!, $draftKey: String, $offset: Int, $totalPaidExpensesDateFrom: DateTime) {\n    expense(expense: { legacyId: $legacyExpenseId }, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n\n    # As it uses a dedicated variable this needs to be separated from the ExpensePageExpenseFields fragment\n    expensePayeeStats: expense(expense: { legacyId: $legacyExpenseId }) {\n      id\n      payee {\n        id\n        stats {\n          id\n          totalPaidInvoices: totalPaidExpenses(expenseType: [INVOICE], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidReceipts: totalPaidExpenses(expenseType: [RECEIPT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidGrants: totalPaidExpenses(expenseType: [GRANT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n\n    loggedInAccount {\n      id\n      ...LoggedInAccountExpensePayoutFields\n    }\n  }\n\n  \n  \n  \n"): typeof import('./graphql').ExpensePageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CreatePendingContributionModal($slug: String!) {\n    host(slug: $slug) {\n      id\n      legacyId\n      type\n      isHost\n      name\n      slug\n      currency\n      settings\n\n      plan {\n        id\n        hostFees\n      }\n      policies {\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      hostFeePercent\n      isTrustedHost\n    }\n  }\n"): typeof import('./graphql').CreatePendingContributionModalDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CreatePendingContributionCollective($slug: String!) {\n    account(slug: $slug) {\n      id\n      type\n      currency\n      childrenAccounts {\n        nodes {\n          id\n          type\n          legacyId\n          isHost\n          name\n          slug\n          currency\n          settings\n          imageUrl\n          currency\n          ... on AccountWithContributions {\n            tiers {\n              nodes {\n                id\n                id\n                slug\n                legacyId\n                name\n              }\n            }\n          }\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          nodes {\n            id\n            slug\n            legacyId\n            name\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').CreatePendingContributionCollectiveDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreatePendingContribution($order: PendingOrderCreateInput!) {\n    createPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n    }\n  }\n"): typeof import('./graphql').CreatePendingContributionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditPendingContribution($order: PendingOrderEditInput!) {\n    editPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n      ...ConfirmContributionFields\n    }\n  }\n  \n"): typeof import('./graphql').EditPendingContributionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DisputedContributionsWarning($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      hasDisputedOrders\n      hasInReviewOrders\n    }\n  }\n"): typeof import('./graphql').DisputedContributionsWarningDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostAgreements($hostSlug: String!, $limit: Int!, $offset: Int!, $account: [AccountReferenceInput]) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      hostedAccountAgreements(limit: $limit, offset: $offset, accounts: $account) {\n        totalCount\n        nodes {\n          id\n          ...AgreementViewFields\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').HostAgreementsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SelectedAccountInfo($account: String!) {\n    account(slug: $account) {\n      id\n      legacyId\n      name\n      slug\n      imageUrl\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').SelectedAccountInfoDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ScheduledExpensesBanner($hostSlug: String!, $limit: Int!, $payoutMethodType: PayoutMethodType) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      transferwise {\n        id\n        amountBatched {\n          valueInCents\n          currency\n        }\n      }\n    }\n    expenses(\n      host: { slug: $hostSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      limit: $limit\n      payoutMethodType: $payoutMethodType\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').ScheduledExpensesBannerDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ManagedOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      id\n      service\n      name\n      type\n      expiryDate\n      data\n      balance {\n        value\n        valueInCents\n        currency\n      }\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    createdAt\n    processedAt\n    frequency\n    tier {\n      id\n      name\n    }\n    totalDonations {\n      value\n      valueInCents\n      currency\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl(height: 96)\n      backgroundImageUrl(height: 256)\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n  }\n"): typeof import('./graphql').ManagedOrderFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query RecurringContributions($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      orders(filter: OUTGOING, onlySubscriptions: true, includeIncognito: true) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n        }\n      }\n    }\n  }\n  \n  \n"): typeof import('./graphql').RecurringContributionsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ClearCache($account: AccountReferenceInput!, $cacheTypes: [AccountCacheType!]) {\n    clearCacheForAccount(account: $account, type: $cacheTypes) {\n      id\n      slug\n      name\n    }\n  }\n"): typeof import('./graphql').ClearCacheDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TransactionsQueryCollectionFragment on TransactionCollection {\n    totalCount\n    offset\n    limit\n    kinds\n    paymentMethodTypes\n    nodes {\n      id\n      uuid\n      kind\n      amount {\n        currency\n        valueInCents\n      }\n      netAmount {\n        currency\n        valueInCents\n      }\n      taxAmount {\n        valueInCents\n        currency\n      }\n      taxInfo {\n        id\n        rate\n        type\n      }\n      platformFee {\n        currency\n        valueInCents\n      }\n      paymentProcessorFee {\n        currency\n        valueInCents\n      }\n      hostFee {\n        currency\n        valueInCents\n      }\n      type\n      description\n      createdAt\n      isRefunded\n      isRefund\n      isOrderRejected\n      toAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        isIncognito\n        ... on AccountWithParent {\n          parent {\n            id\n            slug\n          }\n        }\n        settings\n        ... on Individual {\n          isGuest\n        }\n        ... on Collective {\n          host {\n            id\n            name\n            slug\n            type\n          }\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n      }\n      fromAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        isIncognito\n        ... on Event {\n          parent {\n            id\n          }\n        }\n        ... on Project {\n          parent {\n            id\n          }\n        }\n        ... on Individual {\n          isGuest\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n      }\n      host {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      account {\n        id\n        isIncognito\n      }\n      giftCardEmitterAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n      paymentMethod {\n        id\n        type\n      }\n      payoutMethod {\n        id\n        type\n      }\n      order {\n        id\n        legacyId\n        status\n        memo\n        processedAt\n        toAccount {\n          id\n          slug\n        }\n      }\n      expense {\n        id\n        status\n        tags\n        type\n        feesPayer\n        amount\n        currency\n        legacyId\n        # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n        comments(limit: 1) {\n          totalCount\n        }\n        payoutMethod {\n          id\n          type\n        }\n        account {\n          id\n          slug\n        }\n        createdByAccount {\n          id\n          slug\n        }\n      }\n      relatedTransactions(kind: [HOST_FEE, PAYMENT_PROCESSOR_COVER]) {\n        id\n        type\n        kind\n        netAmount {\n          currency\n          valueInCents\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').TransactionsQueryCollectionFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation addAuthenticatorAppToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: TOTP) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n"): typeof import('./graphql').AddAuthenticatorAppToIndividualDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation removeTwoFactorAuthTokenFromIndividual($account: AccountReferenceInput!) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account, type: TOTP) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"): typeof import('./graphql').RemoveTwoFactorAuthTokenFromIndividualDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveTwoFactorAuthFromIndividual(\n    $account: AccountReferenceInput!\n    $userTwoFactorMethod: UserTwoFactorMethodReferenceInput!\n  ) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account, userTwoFactorMethod: $userTwoFactorMethod) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"): typeof import('./graphql').RemoveTwoFactorAuthFromIndividualDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditTwoFactorAuthenticationMethod($userTwoFactorMethod: UserTwoFactorMethodReferenceInput!, $name: String!) {\n    editTwoFactorAuthenticationMethod(userTwoFactorMethod: $userTwoFactorMethod, name: $name) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"): typeof import('./graphql').EditTwoFactorAuthenticationMethodDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateWebAuthnRegistrationOptions($account: AccountReferenceInput!) {\n    createWebAuthnRegistrationOptions(account: $account)\n  }\n"): typeof import('./graphql').CreateWebAuthnRegistrationOptionsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddTwoFactorAuthToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: WEBAUTHN) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          name\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n"): typeof import('./graphql').AddTwoFactorAuthToIndividualDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    virtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      purpose\n      notes\n      status\n      currency\n      spendingLimitAmount {\n        valueInCents\n        currency\n      }\n      spendingLimitInterval\n      createdAt\n      account {\n        id\n        name\n        slug\n        imageUrl\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n      }\n      host {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n"): typeof import('./graphql').VirtualCardRequestDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RejectVirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    rejectVirtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      status\n    }\n  }\n"): typeof import('./graphql').RejectVirtualCardRequestDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VirtualCard($virtualCard: VirtualCardReferenceInput!) {\n    virtualCard(virtualCard: $virtualCard) {\n      id\n      name\n      last4\n      data\n      privateData\n      provider\n      spendingLimitAmount\n      spendingLimitInterval\n      spendingLimitRenewsOn\n      remainingLimit\n      currency\n      createdAt\n      status\n      account {\n        id\n        name\n        slug\n        imageUrl\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n      }\n      host {\n        id\n        slug\n        stripe {\n          username\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').VirtualCardDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExpensesPage(\n    $collectiveSlug: String!\n    $account: AccountReferenceInput\n    $fromAccount: AccountReferenceInput\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: ExpenseStatusFilter\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      expensesTags {\n        id\n        tag\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on Organization {\n        # We add that for hasFeature\n        isHost\n        isActive\n      }\n\n      ... on Event {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n\n      ... on Project {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n    }\n    expenses(\n      account: $account\n      fromAccount: $fromAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n      }\n    }\n    # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n    # TODO: We don't need to try and fetch this field on non-host accounts (should use a ... on Host)\n    scheduledExpenses: expenses(\n      host: { slug: $collectiveSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: BANK_ACCOUNT\n      limit: 1\n    ) {\n      totalCount\n    }\n  }\n\n  \n  \n  \n"): typeof import('./graphql').ExpensesPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderPage($legacyId: Int!, $collectiveSlug: String!) {\n    order(order: { legacyId: $legacyId }) {\n      id\n      legacyId\n      status\n      description\n      tags\n      ...ConfirmContributionFields\n      paymentMethod {\n        id\n        type\n      }\n      createdAt\n      processedAt\n      permissions {\n        id\n        canMarkAsExpired\n        canMarkAsPaid\n        canSetTags\n        canEdit\n      }\n      transactions {\n        id\n        legacyId\n        group\n        description\n        type\n        kind\n        createdAt\n        order {\n          id\n        }\n        amount {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          type\n          rate\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        fromAccount {\n          id\n          slug\n          name\n          imageUrl\n          isIncognito\n        }\n        account {\n          id\n          slug\n          name\n          imageUrl\n          isIncognito\n        }\n      }\n    }\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      isHost\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n    }\n  }\n\n  \n  \n"): typeof import('./graphql').OrderPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubmittedExpensesPage(\n    $collectiveSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: ExpenseStatusFilter\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      isHost\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n    expenses(\n      createdByAccount: { slug: $collectiveSlug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n          }\n        }\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n  \n"): typeof import('./graphql').SubmittedExpensesPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ProcessingOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      id\n      service\n      name\n      type\n      expiryDate\n      data\n      balance {\n        value\n        valueInCents\n        currency\n      }\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    createdAt\n    frequency\n    tier {\n      id\n      name\n    }\n    totalDonations {\n      value\n      valueInCents\n      currency\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n  }\n"): typeof import('./graphql').ProcessingOrderFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TransactionsPage(\n    $slug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: TransactionType\n    $paymentMethodType: [PaymentMethodType]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $kind: [TransactionKind]\n    $includeIncognitoTransactions: Boolean\n    $includeGiftCardTransactions: Boolean\n    $includeChildrenTransactions: Boolean\n    $virtualCard: [VirtualCardReferenceInput]\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      createdAt\n      imageUrl(height: 256)\n      currency\n      settings\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      processingOrders: orders(filter: OUTGOING, includeIncognito: true, status: [PENDING, PROCESSING]) {\n        totalCount\n        nodes {\n          id\n          ...ProcessingOrderFields\n        }\n      }\n    }\n    transactions(\n      account: { slug: $slug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      paymentMethodType: $paymentMethodType\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      kind: $kind\n      includeIncognitoTransactions: $includeIncognitoTransactions\n      includeGiftCardTransactions: $includeGiftCardTransactions\n      includeChildrenTransactions: $includeChildrenTransactions\n      includeDebts: true\n      virtualCard: $virtualCard\n    ) {\n      ...TransactionsQueryCollectionFragment\n    }\n  }\n  \n  \n  \n"): typeof import('./graphql').TransactionsPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UpdatePage($collectiveSlug: String, $updateSlug: String!, $offset: Int) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      legacyId\n      slug\n      name\n      type\n      description\n      settings\n      imageUrl\n      isFrozen\n      twitterHandle\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      conversationsTags {\n        id\n        tag\n      }\n      ... on Collective {\n        isApproved\n      }\n      type\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n    }\n    update(slug: $updateSlug, account: { slug: $collectiveSlug }) {\n      id\n      slug\n      title\n      createdAt\n      publishedAt\n      html\n      summary\n      isPrivate\n      isChangelog\n      makePublicOn\n      userCanSeeUpdate\n      userCanPublishUpdate\n      reactions\n      userReactions\n      account {\n        id\n        slug\n        type\n        name\n        isHost\n      }\n      fromAccount {\n        id\n        slug\n        type\n        name\n      }\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n  }\n  \n  \n"): typeof import('./graphql').UpdatePageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UpdatesPage(\n    $collectiveSlug: String!\n    $limit: Int\n    $offset: Int\n    $searchTerm: String\n    $orderBy: UpdateChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      legacyId\n      name\n      slug\n      type\n      ... on Event {\n        parent {\n          id\n          slug\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          slug\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      updates(limit: $limit, offset: $offset, searchTerm: $searchTerm, orderBy: $orderBy) {\n        totalCount\n        nodes {\n          id\n          slug\n          title\n          summary\n          createdAt\n          publishedAt\n          updatedAt\n          userCanSeeUpdate\n          tags\n          isPrivate\n          isChangelog\n          makePublicOn\n          fromAccount {\n            id\n            type\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').UpdatesPageDocument;
  export function gql(source: string): unknown;

    export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<    infer TType,    any  >    ? TType    : never;  
}